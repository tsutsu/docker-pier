#!/usr/bin/env ruby
require "docker-pier"
require "main"
require "highline"
require "paint"

Main do
  db do
    create_table(:clusters) do
      primary_key :id
      String :name, unique: true, null: false
      String :pier_uri, null: false
    end unless table_exists?(:clusters)
  end

  def run
    $stderr.puts "use `#{File.basename($0)} --help` for usage"
  end


  mode 'list' do
    def run
      in_use_cluster_name = ENV['DOCKER_MACHINE_NAME']

      db[:clusters].each do |cluster|
        cluster_ansi = if cluster[:name] == in_use_cluster_name
          Paint['*' + cluster[:name], :blue]
        else
          ' ' + cluster[:name]
        end

        puts "#{cluster_ansi}: #{cluster[:pier_uri]}"
      end
    end
  end

  mode 'detach' do
    argument('name'){
      description "a cluster nickname"
      required
    }

    def run
      cluster_name = params[:name].values.first
      pier = db[:clusters].where(name: cluster_name).delete

      in_use_cluster_name = ENV['DOCKER_MACHINE_NAME']
      if cluster_name == in_use_cluster_name
        puts <<~EOF
          unset DOCKER_TLS_VERIFY
          unset DOCKER_HOST
          unset DOCKER_CERT_PATH
          unset DOCKER_MACHINE_NAME
        EOF
      end
    end
  end

  mode 'attach' do
    argument('name'){
      description "nickname for the new cluster"
      required
    }

    argument('uri'){
      description "URI of the cluster's pier"
      required
    }

    def run
      cluster_name = params[:name].values.first
      pier_uri = URI.parse('//' + params[:uri].values.first + '/')

      # test validity
      pier = DockerPier::Pier.new(pier_uri, name: cluster_name)
      pier.bootstrap!

      pier.libvirt.get_node_info
      Docker.info(pier.docker)
      pier.ssh.exec! 'pwd'

      db[:clusters].insert(nil, cluster_name, pier_uri.to_s)

      puts <<~EOF
        export DOCKER_TLS_VERIFY=1
        export DOCKER_HOST=#{pier.resolved_docker_uri}
        export DOCKER_CERT_PATH=#{pier.x509_dir}
        export DOCKER_MACHINE_NAME=#{cluster_name}
      EOF
    end
  end

  mode 'on' do
    argument('name'){
      description "nickname of the cluster to switch to"
      required
    }

    def run
      cluster_name = params[:name].values.first
      pier = db[:clusters].where(name: cluster_name).first
      unless pier
        $stderr.puts "unknown cluster '#{cluster_name}'"
        return false
      end

      pier = DockerPier::Pier.new(pier[:pier_uri], name: pier[:name])

      puts <<~EOF
        export DOCKER_TLS_VERIFY=1
        export DOCKER_HOST=#{pier.resolved_docker_uri}
        export DOCKER_CERT_PATH=#{pier.x509_dir}
        export DOCKER_MACHINE_NAME=#{cluster_name}
      EOF
    end
  end

  mode 'off' do
    def run
      puts <<~EOF
        unset DOCKER_TLS_VERIFY
        unset DOCKER_HOST
        unset DOCKER_CERT_PATH
        unset DOCKER_MACHINE_NAME
      EOF
    end
  end

  DMACHINE_PS1 = '${DOCKER_MACHINE_NAME:+ \\[\\033[34m\\]*$DOCKER_MACHINE_NAME\\[\\033[m\\]}'

  def modified_ps1_ln
    ps1 = ENV['PS1']
    return '' if ps1 =~ /DOCKER_MACHINE_NAME/
    escaped_ps1 = ps1.gsub(/(\\\[.+?\\\])|(\$\{.+?\})/){ |s| s.gsub(/:/, '&&COLON&&') }
    escaped_ps1_parts = escaped_ps1.split(':')
    return '' unless escaped_ps1_parts.length == 2
    ps1_parts = escaped_ps1_parts.map{ |s| s.gsub(/&&COLON&&/, ':') }
    "export PS1='#{ps1_parts[0]}#{DMACHINE_PS1}:#{ps1_parts[1]}'"
  end

  mode 'hook:install' do
    def run
      puts <<~EOF
        pier ()
        {
          local subcommand="$1"
          case "${subcommand}" in
          on|off|attach|detach)
            shift
            eval "$(command docker-pier "${subcommand}" "$@")"
            ;;
          *)
            command docker-pier "$@"
            ;;
          esac
        }

        #{modified_ps1_ln}
      EOF
    end
  end


  mode 'nodes' do
    def run
      cluster_name = ENV['DOCKER_MACHINE_NAME']
      pier = db[:clusters].where(name: cluster_name).first
      unless pier
        $stderr.puts "unknown cluster '#{cluster_name}'"
        return false
      end
      pier = DockerPier::Pier.new(pier[:pier_uri], name: pier[:name])

      pier.nodes.each do |node|
        puts node.inspect
      end
    end
  end

  mode 'logs' do
    def run
      cluster_name = ENV['DOCKER_MACHINE_NAME']
      pier = db[:clusters].where(name: cluster_name).first
      unless pier
        $stderr.puts "unknown cluster '#{cluster_name}'"
        return false
      end
      pier = DockerPier::Pier.new(pier[:pier_uri], name: pier[:name])

      handle_maxlen = 0
      tty_width = HighLine::SystemExtensions.terminal_size[0]

      pier.logs.stream! do |event|
        next if event.lines.empty?

        handle_ansi = event.task.name
        handle_maxlen = [handle_maxlen, handle_ansi.length].max
        handle_ansi = handle_ansi.rjust(handle_maxlen, ' ')
        handle_ansi = Paint[handle_ansi, event.task.color]

        time_ansi = Paint[event.time.strftime("%H:%M:%S"), :white]

        ln1_prefix_ansi = "%s %s " % [handle_ansi, time_ansi]
        lns_indent = ' ' * Paint.unpaint(ln1_prefix_ansi).length
        lns_color = (event.type == :error) ? :red : :default

        tty_remain = tty_width - lns_indent.length
        lns = event.lines.dup
        lns = lns.map{ |ln| ln.gsub(/(.{1,#{tty_remain}})/, "\\1\n").split("\n") }.flatten

        puts ln1_prefix_ansi + Paint[lns.shift, lns_color]

        lns.each do |ln|
          puts lns_indent + Paint[ln, lns_color]
        end
      end
    end
  end

  mode 'shell' do
    def run
      cluster_name = ENV['DOCKER_MACHINE_NAME']
      pier = db[:clusters].where(name: cluster_name).first
      unless pier
        $stderr.puts "unknown cluster '#{cluster_name}'"
        return false
      end
      pier = DockerPier::Pier.new(pier[:pier_uri], name: pier[:name])

      execv = ['ssh', '-A', pier.ssh_connstring] + ARGV[1..-1]
      Kernel.exec(*execv)
    end
  end
end
